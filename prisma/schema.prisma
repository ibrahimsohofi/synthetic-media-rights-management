// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

// API Metrics model
model APIMetrics {
  id          String      @id @default(uuid())
  endpoint    String
  method      String
  statusCode  Int
  duration    Float       // in milliseconds
  timestamp   DateTime    @default(now())
  userId      String?
  
  @@index([endpoint])
  @@index([timestamp])
}

// Error Log model
model ErrorLog {
  id            String      @id @default(uuid())
  endpoint      String
  method        String
  errorCode     String
  errorMessage  String
  timestamp     DateTime    @default(now())
  userId        String?
  
  @@index([endpoint])
  @@index([timestamp])
}

// Rate Limit Bucket model
model RateLimitBucket {
  identifier    String      @id
  tokens        Float
  lastRefill    DateTime
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
}

// User model
model User {
  id                  String      @id @default(uuid())
  email               String      @unique
  passwordHash        String
  name                String?
  username            String?     @unique
  bio                 String?
  avatar              String?     @default("default-avatar.png")
  creatorType         String?
  portfolioUrl        String?
  isPublic            Boolean     @default(true)
  isEmailVerified     Boolean     @default(false)
  notificationPreferences Json?
  
  // 2FA fields
  twoFactorEnabled    Boolean     @default(false)
  twoFactorSecret     String?
  backupCodes         String?     // JSON array of hashed backup codes

  // Relations
  ownedTeams          Team[]         @relation("TeamOwner")
  teamMemberships     TeamMember[]
  creativeWorks       CreativeWork[]
  initiatedScans      DetectionScan[]
  licenses            License[]
  licensesReceived    License[]      @relation("Licensee")
  violations          Violation[]
  marketplaceListings MarketplaceListing[]
  transactions        Transaction[]
  notifications       Notification[]
  certificates        Certificate[]

  // Timestamps
  createdAt           DateTime    @default(now())
  updatedAt           DateTime    @updatedAt
}

// Creative Work model
model CreativeWork {
  id                  String      @id @default(uuid())
  title               String
  description         String?
  type                WorkType
  category            String
  fileUrls            String      // Comma-separated URLs
  thumbnailUrl        String?
  metadataHash        String?     @unique // For blockchain verification
  aiTrainingOptOut    Boolean     @default(true)
  detectionEnabled    Boolean     @default(true)
  styleFingerprint    Json?       // Extracted style characteristics
  keywords            String      // Comma-separated keywords
  registrationStatus  RegistrationStatus @default(PENDING)
  visibility          Visibility  @default(PRIVATE)

  // Relations
  ownerId             String
  owner               User        @relation(fields: [ownerId], references: [id])
  licenses            License[]
  violations          Violation[]
  marketplaceListings MarketplaceListing[]
  blockchain          BlockchainRegistration?
  certificates        Certificate[] // Added relation to certificates
  fingerprints        ContentFingerprint[]
  detectionResults    DetectionResult[]

  // Timestamps
  createdAt           DateTime    @default(now())
  updatedAt           DateTime    @updatedAt

  @@index([ownerId])
  @@index([type])
  @@index([registrationStatus])
}

// Blockchain Registration model
model BlockchainRegistration {
  id                  String      @id @default(uuid())
  transactionId       String      @unique
  blockNumber         Int
  networkName         String
  registeredAt        DateTime
  verified            Boolean     @default(false)

  // Relation to creative work
  creativeWorkId      String      @unique
  creativeWork        CreativeWork @relation(fields: [creativeWorkId], references: [id], onDelete: Cascade)

  // Timestamps
  createdAt           DateTime    @default(now())
  updatedAt           DateTime    @updatedAt

  @@index([transactionId])
  @@index([creativeWorkId])
}

// License model
model License {
  id                  String      @id @default(uuid())
  title               String
  type                LicenseType
  status              LicenseStatus @default(ACTIVE)
  terms               Json
  startDate           DateTime
  endDate             DateTime?
  price               Float?
  royaltyPercentage   Float?
  permissions         String      // Comma-separated permissions
  restrictions        String      // Comma-separated restrictions
  contractUrl         String?

  // Relations
  creativeWorkId      String
  creativeWork        CreativeWork @relation(fields: [creativeWorkId], references: [id])
  ownerId             String
  owner               User        @relation(fields: [ownerId], references: [id])
  licenseeId          String?
  licensee            User?       @relation("Licensee", fields: [licenseeId], references: [id])

  // Timestamps
  createdAt           DateTime    @default(now())
  updatedAt           DateTime    @updatedAt

  @@index([ownerId])
  @@index([licenseeId])
  @@index([creativeWorkId])
  @@index([status])
}

// Violation model
model Violation {
  id                  String      @id @default(uuid())
  status              ViolationStatus @default(PENDING)
  sourceUrl           String
  detectionMethod     String
  matchConfidence     Float
  description         String?
  evidenceUrls        String      // Comma-separated URLs
  resolutionNotes     String?

  // Relations
  creativeWorkId      String
  creativeWork        CreativeWork @relation(fields: [creativeWorkId], references: [id])
  reportedById        String
  reportedBy          User        @relation(fields: [reportedById], references: [id])
  detectionResult     DetectionResult? @relation("ViolationResult")

  // Timestamps
  detectedAt          DateTime    @default(now())
  updatedAt           DateTime    @updatedAt
  resolvedAt          DateTime?

  @@index([creativeWorkId])
  @@index([reportedById])
  @@index([status])
}

// Marketplace Listing model
model MarketplaceListing {
  id                  String      @id @default(uuid())
  title               String
  description         String
  price               Float
  licenseType         LicenseType
  duration            Int?        // In days
  featured            Boolean     @default(false)
  status              ListingStatus @default(ACTIVE)

  // Relations
  creativeWorkId      String
  creativeWork        CreativeWork @relation(fields: [creativeWorkId], references: [id])
  sellerId            String
  seller              User        @relation(fields: [sellerId], references: [id])

  // Timestamps
  createdAt           DateTime    @default(now())
  updatedAt           DateTime    @default(now())
  expiresAt           DateTime?

  @@index([sellerId])
  @@index([creativeWorkId])
  @@index([status])
}

// Transaction model
model Transaction {
  id                  String      @id @default(uuid())
  type                TransactionType
  amount              Float
  currency            String      @default("USD")
  status              TransactionStatus @default(PENDING)
  paymentMethod       String?
  paymentId           String?     @unique
  description         String?

  // Relations
  userId              String
  user                User        @relation(fields: [userId], references: [id])

  // Timestamps
  createdAt           DateTime    @default(now())
  completedAt         DateTime?

  @@index([userId])
  @@index([status])
}

// Notification model
model Notification {
  id          String             @id @default(uuid())
  userId      String
  user        User               @relation(fields: [userId], references: [id], onDelete: Cascade)
  type        NotificationType
  title       String
  message     String
  linkUrl     String?
  isRead      Boolean            @default(false)
  metadata    Json?
  createdAt   DateTime           @default(now())
  expiresAt   DateTime?

  @@index([userId])
  @@index([isRead])
  @@index([createdAt])
}

// Team model
model Team {
  id                  String      @id @default(uuid())
  name                String
  description         String?
  avatarUrl           String?
  inviteCode          String?     @unique
  isPublic            Boolean     @default(false)

  // Owner relation
  ownerId             String
  owner               User        @relation("TeamOwner", fields: [ownerId], references: [id])

  // Members relation
  members             TeamMember[]

  // Timestamps
  createdAt           DateTime    @default(now())
  updatedAt           DateTime    @updatedAt

  @@index([ownerId])
}

// Team Member model
model TeamMember {
  id                  String      @id @default(uuid())
  role                String      @default("MEMBER")
  status              String      @default("ACTIVE")
  permissions         String      // Comma-separated permissions

  // Relations
  teamId              String
  team                Team        @relation(fields: [teamId], references: [id], onDelete: Cascade)
  userId              String
  user                User        @relation(fields: [userId], references: [id], onDelete: Cascade)

  // Timestamps
  joinedAt            DateTime    @default(now())
  updatedAt           DateTime    @default(now())

  @@unique([teamId, userId])
  @@index([teamId])
  @@index([userId])
}

// Certificate model for tracking verification certificates
model Certificate {
  id                  String      @id @default(uuid())
  workId              String
  ownerId             String
  certificateType     String      // "standard", "premium", "enhanced"
  metadataJson        String      // JSON stringified certificate metadata
  signature           String      // Digital signature
  publicUrl           String      // Public verification URL
  isRevoked           Boolean     @default(false)
  expiresAt           DateTime?   // Optional expiration date
  createdAt           DateTime    @default(now())
  updatedAt           DateTime    @updatedAt

  // Relations
  creativeWork        CreativeWork @relation(fields: [workId], references: [id], onDelete: Cascade)
  owner               User        @relation(fields: [ownerId], references: [id])

  @@index([workId])
  @@index([ownerId])
  @@index([createdAt])
}

// ContentFingerprint model for storing digital fingerprints
model ContentFingerprint {
  id                  String      @id @default(uuid())
  creativeWorkId      String
  creativeWork        CreativeWork @relation(fields: [creativeWorkId], references: [id])
  fingerprintType     String      // e.g., "perceptual_hash", "wavelet_transform", "deep_features"
  fingerprintData     String      // The actual fingerprint data
  algorithm           String      // Algorithm used to generate the fingerprint
  version             String      // Version of the algorithm
  confidence         Float       // Confidence score of the fingerprint
  metadata           Json?       // Additional metadata about the fingerprint

  // Timestamps
  createdAt          DateTime    @default(now())
  updatedAt          DateTime    @updatedAt

  @@index([creativeWorkId])
  @@index([fingerprintType])
}

// DetectionScan model for tracking content scans
model DetectionScan {
  id                  String      @id @default(uuid())
  status              ScanStatus  @default(IN_PROGRESS)
  targetUrl           String      // URL or identifier of content being scanned
  scanType            String      // Type of scan (e.g., "web", "social_media", "marketplace")
  progress            Float       @default(0) // Progress percentage
  resultsCount        Int         @default(0) // Number of matches found
  scanConfig          Json?       // Configuration used for the scan
  
  // Relations
  results             DetectionResult[]
  initiatedById       String
  initiatedBy         User        @relation(fields: [initiatedById], references: [id])

  // Timestamps
  startedAt           DateTime    @default(now())
  completedAt         DateTime?
  updatedAt           DateTime    @updatedAt

  @@index([initiatedById])
  @@index([status])
}

// DetectionResult model for storing scan results
model DetectionResult {
  id                  String      @id @default(uuid())
  scanId              String
  scan                DetectionScan @relation(fields: [scanId], references: [id])
  matchType           MatchType   @default(EXACT)
  confidence         Float
  sourceUrl          String
  contextData        Json?       // Additional context about the match
  verified           Boolean     @default(false)
  
  // Relations
  creativeWorkId      String
  creativeWork        CreativeWork @relation(fields: [creativeWorkId], references: [id])
  violation          Violation?  @relation("ViolationResult", fields: [violationId], references: [id])
  violationId        String?     @unique

  // Timestamps
  detectedAt          DateTime    @default(now())
  updatedAt          DateTime    @updatedAt

  @@index([scanId])
  @@index([creativeWorkId])
  @@index([matchType])
}

// Enums for database
enum WorkType {
  IMAGE
  VIDEO
  AUDIO
  TEXT
  MODEL
  DATASET
  OTHER
}

enum RegistrationStatus {
  PENDING
  REGISTERED
  REJECTED
  EXPIRED
}

enum Visibility {
  PUBLIC
  PRIVATE
  TEAM_ONLY
}

enum LicenseType {
  EXCLUSIVE
  NON_EXCLUSIVE
  ATTRIBUTION
  COMMERCIAL
  NON_COMMERCIAL
  DERIVATIVE
  NON_DERIVATIVE
  OTHER
}

enum LicenseStatus {
  ACTIVE
  EXPIRED
  REVOKED
  PENDING
}

enum ViolationStatus {
  PENDING
  CONFIRMED
  REJECTED
  RESOLVED
}

enum ListingStatus {
  ACTIVE
  SOLD
  EXPIRED
  REMOVED
}

enum TransactionType {
  PURCHASE
  SALE
  REFUND
  SUBSCRIPTION
  FEE
}

enum TransactionStatus {
  PENDING
  COMPLETED
  FAILED
  REFUNDED
}

enum NotificationType {
  SYSTEM
  RIGHTS_REGISTERED
  LICENSE_CREATED
  LICENSE_PURCHASED
  VIOLATION_DETECTED
  VIOLATION_RESOLVED
  MARKETPLACE_SALE
  NEW_MESSAGE
  CERTIFICATE_GENERATED
  CERTIFICATE_REVOKED
  TEAM_INVITATION
}

enum ScanStatus {
  PENDING
  IN_PROGRESS
  COMPLETED
  FAILED
  CANCELLED
}

enum MatchType {
  EXACT
  SIMILAR
  DERIVATIVE
  PARTIAL
  UNKNOWN
}
